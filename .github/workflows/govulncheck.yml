name: govulncheck
on:
  push:
    branches:
      - main
  schedule:
    # Mondays at 0000
    - cron: "0 0 * * 1"
  # Allow to trigger the integration tests manually
  workflow_dispatch:

jobs:
  check-for-vulnerabilities:
    name: Check for vulnerabilities using `govulncheck`
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - uses: golang/govulncheck-action@v1.0.4
        with:
          # NOTE that we want to produce the SARIF-formatted report, which can then be consumed by other tools ...
          output-format: sarif
          output-file: govulncheck.sarif

      # Clean up duplicate stacks in SARIF file
      - name: Clean SARIF file
        run: |
          if [ -f govulncheck.sarif ]; then
            # Use jq to remove duplicate stacks while preserving the rest of the SARIF structure
            jq '.runs[].results[]?.stacks |= if type == "array" then unique else . end' govulncheck.sarif > govulncheck_clean.sarif
            mv govulncheck_clean.sarif govulncheck.sarif
          fi

      # ... such as the Code Scanning tab (https://github.com/oapi-codegen/oapi-codegen/security/code-scanning?query=is%3Aopen+branch%3Amain+tool%3Agovulncheck)
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3.30.3
        with:
          sarif_file: govulncheck.sarif
          category: govulncheck